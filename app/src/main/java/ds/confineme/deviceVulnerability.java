package ds.confineme;

import android.content.Context;
import android.graphics.Color;
import android.provider.Settings;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.util.ArrayList;


public class deviceVulnerability extends ActionBarActivity {
    RelativeLayout layoutdevice;
    Context context;
    TextView deviceStatus;

    static int riskFactor = 0;
    static String recommend = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_device_vulnerability);
        layoutdevice = (RelativeLayout) findViewById(R.id.deviceVul);
        context = getApplicationContext();
        deviceStatus = (TextView) findViewById(R.id.devStat);

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_device_vulnerability, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    /*
    * Get Recommendations on Device Scan clicked
    * */
    public void devGetRecoClicked(View V){
        deviceStatus.setText(recommend);
    }

    /*
    * Device Vulnerability Scan is clicked
    * */
    public void deviceScanClicked(View V){
        riskFactor = 0;
        recommend = "";
        if(!accessibilityEnabled()){
            riskFactor += 35;
        }
        if(!activityDependency()){
            riskFactor += 10;
        }
        if(speakPasswordEnabled()){
            riskFactor += 15;
            recommend += ("Speak Password in Accessibility mode should be disabled unless required\n");
        }
        if(!mockLocationsEnabled()){
            riskFactor += 10;
            recommend  += ("Mock 'Location' Information should be turned on\n");
        }
        if(waitDebugger()){
            riskFactor += 5;
        }
        if(wifiNum()){
            riskFactor += 5;
        }
        if(devSettingsEnabled()){
            riskFactor += 10;
            recommend += ("Developer Settings should be turned off unless required\n");
        }
        if(!systemPropertyVersion()){
            riskFactor += 10;
        }
        if (riskFactor >= 70){
            deviceStatus.setBackgroundColor(Color.parseColor("#FF84FF7E"));
        }
        else if (riskFactor >= 30 && riskFactor < 70){
            deviceStatus.setBackgroundColor(Color.parseColor("#FFFFFF93"));
        }
        else {
            deviceStatus.setBackgroundColor(Color.parseColor("#FFFF8278"));
        }

        deviceStatus.setText(riskFactor+"% secure!");
    }

    /*
    * Check whether Accessibility is enabled
    * */

    public boolean accessibilityEnabled(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.ACCESSIBILITY_ENABLED, 0) == 1);
    }

    /*
    * Check if speak password is enabled
    * */
    public boolean speakPasswordEnabled(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD, 0) == 1);
    }

    /*
    * Verify whether the system properties version is up to date
    * */

    public boolean systemPropertyVersion(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.SYS_PROP_SETTING_VERSION, 2) == 1);
    }

    /*
    * Verify whether the developer settings are enabled on the device
    * */
    public boolean devSettingsEnabled(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.DEVELOPMENT_SETTINGS_ENABLED, 2) == 1);
    }
    /*
    * Verify if activity dependencies are allowed in developer options
    * */
    public boolean activityDependency(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Global.ALWAYS_FINISH_ACTIVITIES, 2) == 1);
    }

    /*
    * Verify if activity dependencies are allowed in developer options
    * */
    public boolean waitDebugger(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Global.WAIT_FOR_DEBUGGER, 2) == 1);
    }

    /*
    * Verify WiFi networks vulnerability
    * */
    public boolean wifiNum(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Global.WIFI_NUM_OPEN_NETWORKS_KEPT, 2) < 4);
    }

    /*
    * Verify whether Mock Locations are displayed to preserve confidentiality
    * */
    public boolean mockLocationsEnabled(){
        return (Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.ALLOW_MOCK_LOCATION,2) == 1);
    }
}
